# -*- coding: utf-8 -*-
"""Binary Classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FGoDf-r4mrQsbhIp9HTVVkvbzHdhEPFb

Loading Dataset and Inporting Libraries
"""

import numpy as np
import pandas as pd
from tensorflow.python import keras
from keras.models import Sequential
from keras.layers import Dense

from google.colab import files
uploaded_train=files.upload()
uploaded_test=files.upload()

train=np.loadtxt('train.csv',delimiter=',')
test=np.loadtxt('test.csv',delimiter=',')
TrainX=train[:,0:8]  #extracting input columns(0-8)
TrainY=train[:,8]    #extracting output colums(9)

TestX=test[:,0:8]  #extracting input columns(0-8)
TestY=test[:,8]    #extracting output colums(9)

"""Defining the Model"""

model=Sequential()
model.add(Dense(24 ,input_shape=(8,),activation='relu')) #shape of data provided for training
#model.add(Dense(15,activation='tanh'))
model.add(Dense(12,activation='relu'))
#model.add(Dense(15,activation='relu'))
model.add(Dense(8,activation='relu'))
model.add(Dense(1,activation='sigmoid'))
model.summary()   #prints a summary of model created

"""Compiling the model(putting together optimiser and loss functions)"""

model.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])

"""Fitting the model(Executing the model on data)"""

model.fit(TrainX,TrainY,epochs=150,batch_size=10,verbose=0)   #fitting training data set

"""Evaluating training accuracy of the model(need to split the data for training and testing seperately)"""

Trainloss,Trainaccuracy=model.evaluate(TrainX,TrainY,verbose=0) #Input and output data values
print("Training Accuracy is :%.2f" %(Trainaccuracy*100))
print("Losss is %.2f" %(Trainloss*100))

model.fit(TestX,TestY,epochs=150,batch_size=10,verbose=0) #fitting testing data set

Testloss,Testaccuracy=model.evaluate(TestX,TestY,verbose=0) #Input and output data values
print("Testing Accuracy is :%.2f" %(Testaccuracy*100))
print("Losss is %.2f" %(Testloss*100))

"""Making Predictions"""

pred=model.predict(TrainX)         #for training dataset
predictions=(pred >0.5).astype(int)
for i in range(20):
  print(TrainX[i],predictions[i],TrainY[i])

"""Making Predictions for testing dataset"""

pred=model.predict(TestX)         #for training dataset
predictions=(pred >0.5).astype(int)
for i in range(20):
  print(TestX[i],predictions[i],TestY[i])

"""Attempt to read an image for testing"""

import numpy as np
import matplotlib.image as mlp
import matplotlib.pyplot as py
from PIL import Image

img=mlp.imread("Pic1.jpg")
print(img.shape)
if(img.shape[2]==3):
  res=img.reshape(img.shape[0],-1)
else:
  res=img
#np.savetxt('Crackdata.csv',res)
print(res.shape)
#py.imshow(img)
#py.imshow(res)

image=Image.open('Pic1.jpg')
image.convert("1")
py.imshow(image)